# New Class
snippet abq "Insert required imports for Abaqus" b
import os
from abaqus import (session, mdb, backwardCompatibility, monitorManager)
from odbAccess import Odb
from abaqusConstants import *
from jobMessage import *
import assembly
import datum
import interaction
import job
import load
import material
import mesh
import part
import partition
import regionToolset
import section
import sketch
import step
import visualization
import xyPlot
import displayGroupMdbToolset as dgm
import displayGroupOdbToolset as dgo
# Set backward compatibility
backwardCompatibility.setValues(includeDeprecated=False, reportDeprecated=True)
${0}
endsnippet

# set working directory
snippet abqworkdir "Change working directory in Abaqus" b
work_dir = r"${1:working directory}"
if os.name == 'posix':
	ensure_dir(r"/home/ctapia/Abaqus_Results" + os.sep + work_dir)
	os.chdir(r"/home/ctapia/Abaqus_Results" + os.sep + work_dir)
# else is windows
else:
	ensure_dir(r"D:\Abaqus_Tapia" + os.sep + work_dir)
	os.chdir(r"D:\Abaqus_Tapia" + os.sep + work_dir)
${0}
endsnippet

# start abaqus model
snippet abqmod "Create an Abaqus model object" b
# Model
model = mdb.Model(name='${1:model name}')
# Viewport
viewp = session.Viewport(name='$1', origin=(20, 0), width=450, height=170)
${0}
endsnippet

# create sketch
snippet abqsketch "Create a sketch object" b
${1:sketch} = ${2:model}.ConstrainedSketch(
	name='${3:name}', sheetSize=200.)
${0}
endsnippet

# create part (2D)
snippet abqpart2D "Create an Abaqus part 2D" b
${1:part} = ${2:model}.Part(name='${3:name}', dimensionality=TWO_D_PLANAR, type=DEFORMABLE_BODY)
$0
endsnippet

# create part (3D)
snippet abqpart3D "Create an Abaqus part 3D" b
${1:part} = ${2:model}.Part(name='${3:name}', dimensionality=THREE_D, type=DEFORMABLE_BODY)
$0
endsnippet

# create instance
snippet abqinstance "Create an Abaqus instance" b
${1:inst} = ${2:rootAssembly}.Instance(name='${3:name}', part=${4:part}, dependent=${5:False})
$0
endsnippet

# Define elastic material (2D)
snippet abqmat2d "Create an Abaqus elastic material" b
${1:props} = (${2:Ex}, ${3:Ey}, ${4:nu}, ${5:Gxy})

${6:material} = ${7:model}.Material(name='${8:name}')
$6.Elastic(table=($1, ), type=LAMINA)
endsnippet

# Define elastic material (3D)
snippet abqmat3d "Create an Abaqus 3D elastic material" b
${1:props} = (${2:E1}, ${3:E2}, ${4:E3}, ${5:nu_12}, ${6:nu_13}, ${7:nu_23}, ${8:G12}, ${9:G13}, ${10:G23} )

${11:material} = ${12:model}.Material(name='${13:name}')
$11.Elastic(table=($1, ), type=ENGINEERING_CONSTANTS)
endsnippet

# Create section and assign to part
snippet abqsec "Create an Abaqus elastic material" b
${1:section} = ${2:model}.HomogeneousSolidSection(name='${3:name}', material=${4:mat_1}.name, thickness=${5:thickness})
# Create sets to assign section to
set_faces = ${6:part}.Set(faces=$6.faces[:], name='set $6')

$6.SectionAssignment(region=set_faces, sectionName='$3', thicknessAssignment=FROM_SECTION)
endsnippet

# Material orientation
snippet abqorient "Material orientation" b
# Define orientation of the material
${1:part}.MaterialOrientation(region=${2:set}, orientationType=GLOBAL,
								axis=AXIS_1, stackDirection=STACK_3)
${0}
endsnippet

# define the viridis color map in abaqus
snippet abqvir "Insert Viridis colormap to Abaqus" b
# create viridis spectrum (we all love this! <3 )
colors_viridis = (
	'#440154', '#440255', '#440357', '#450558', '#45065a', '#45085b',
	'#46095c', '#460b5e', '#460c5f', '#460e61', '#470f62', '#471163',
	'#471265', '#471466', '#471567', '#471669', '#47186a', '#48196b',
	'#481a6c', '#481c6e', '#481d6f', '#481e70', '#482071', '#482172',
	'#482273', '#482374', '#472575', '#472676', '#472777', '#472878',
	'#472a79', '#472b7a', '#472c7b', '#462d7c', '#462f7c', '#46307d',
	'#46317e', '#45327f', '#45347f', '#453580', '#453681', '#443781',
	'#443982', '#433a83', '#433b83', '#433c84', '#423d84', '#423e85',
	'#424085', '#414186', '#414286', '#404387', '#404487', '#3f4587',
	'#3f4788', '#3e4888', '#3e4989', '#3d4a89', '#3d4b89', '#3d4c89',
	'#3c4d8a', '#3c4e8a', '#3b508a', '#3b518a', '#3a528b', '#3a538b',
	'#39548b', '#39558b', '#38568b', '#38578c', '#37588c', '#37598c',
	'#365a8c', '#365b8c', '#355c8c', '#355d8c', '#345e8d', '#345f8d',
	'#33608d', '#33618d', '#32628d', '#32638d', '#31648d', '#31658d',
	'#31668d', '#30678d', '#30688d', '#2f698d', '#2f6a8d', '#2e6b8e',
	'#2e6c8e', '#2e6d8e', '#2d6e8e', '#2d6f8e', '#2c708e', '#2c718e',
	'#2c728e', '#2b738e', '#2b748e', '#2a758e', '#2a768e', '#2a778e',
	'#29788e', '#29798e', '#287a8e', '#287a8e', '#287b8e', '#277c8e',
	'#277d8e', '#277e8e', '#267f8e', '#26808e', '#26818e', '#25828e',
	'#25838d', '#24848d', '#24858d', '#24868d', '#23878d', '#23888d',
	'#23898d', '#22898d', '#228a8d', '#228b8d', '#218c8d', '#218d8c',
	'#218e8c', '#208f8c', '#20908c', '#20918c', '#1f928c', '#1f938b',
	'#1f948b', '#1f958b', '#1f968b', '#1e978a', '#1e988a', '#1e998a',
	'#1e998a', '#1e9a89', '#1e9b89', '#1e9c89', '#1e9d88', '#1e9e88',
	'#1e9f88', '#1ea087', '#1fa187', '#1fa286', '#1fa386', '#20a485',
	'#20a585', '#21a685', '#21a784', '#22a784', '#23a883', '#23a982',
	'#24aa82', '#25ab81', '#26ac81', '#27ad80', '#28ae7f', '#29af7f',
	'#2ab07e', '#2bb17d', '#2cb17d', '#2eb27c', '#2fb37b', '#30b47a',
	'#32b57a', '#33b679', '#35b778', '#36b877', '#38b976', '#39b976',
	'#3bba75', '#3dbb74', '#3ebc73', '#40bd72', '#42be71', '#44be70',
	'#45bf6f', '#47c06e', '#49c16d', '#4bc26c', '#4dc26b', '#4fc369',
	'#51c468', '#53c567', '#55c666', '#57c665', '#59c764', '#5bc862',
	'#5ec961', '#60c960', '#62ca5f', '#64cb5d', '#67cc5c', '#69cc5b',
	'#6bcd59', '#6dce58', '#70ce56', '#72cf55', '#74d054', '#77d052',
	'#79d151', '#7cd24f', '#7ed24e', '#81d34c', '#83d34b', '#86d449',
	'#88d547', '#8bd546', '#8dd644', '#90d643', '#92d741', '#95d73f',
	'#97d83e', '#9ad83c', '#9dd93a', '#9fd938', '#a2da37', '#a5da35',
	'#a7db33', '#aadb32', '#addc30', '#afdc2e', '#b2dd2c', '#b5dd2b',
	'#b7dd29', '#bade27', '#bdde26', '#bfdf24', '#c2df22', '#c5df21',
	'#c7e01f', '#cae01e', '#cde01d', '#cfe11c', '#d2e11b', '#d4e11a',
	'#d7e219', '#dae218', '#dce218', '#dfe318', '#e1e318', '#e4e318',
	'#e7e419', '#e9e419', '#ece41a', '#eee51b', '#f1e51c', '#f3e51e',
	'#f6e61f', '#f8e621', '#fae622', '#fde724')
# Reversed viridis
colors_viridis_reversed = list(reversed(colors_viridis))
session.Spectrum(name="Viridis", colors=colors_viridis)
session.Spectrum(name="Reversed Viridis", colors=colors_viridis_reversed)
${0}
endsnippet

# define the inferno color map in abaqus
snippet abqinferno "Insert Inferno colormap to Abaqus" b
# create inferno spectrum (we all love this! <3 )
colors_inferno = (
	'#000004', '#010005', '#010106', '#010108', '#02010a', '#02020c', '#02020e',
	'#030210', '#040312', '#040314', '#050417', '#060419', '#07051b', '#08051d',
	'#09061f', '#0a0722', '#0b0724', '#0c0826', '#0d0829', '#0e092b', '#10092d',
	'#110a30', '#120a32', '#140b34', '#150b37', '#160b39', '#180c3c', '#190c3e',
	'#1b0c41', '#1c0c43', '#1e0c45', '#1f0c48', '#210c4a', '#230c4c', '#240c4f',
	'#260c51', '#280b53', '#290b55', '#2b0b57', '#2d0b59', '#2f0a5b', '#310a5c',
	'#320a5e', '#340a5f', '#360961', '#380962', '#390963', '#3b0964', '#3d0965',
	'#3e0966', '#400a67', '#420a68', '#440a68', '#450a69', '#470b6a', '#490b6a',
	'#4a0c6b', '#4c0c6b', '#4d0d6c', '#4f0d6c', '#510e6c', '#520e6d', '#540f6d',
	'#550f6d', '#57106e', '#59106e', '#5a116e', '#5c126e', '#5d126e', '#5f136e',
	'#61136e', '#62146e', '#64156e', '#65156e', '#67166e', '#69166e', '#6a176e',
	'#6c186e', '#6d186e', '#6f196e', '#71196e', '#721a6e', '#741a6e', '#751b6e',
	'#771c6d', '#781c6d', '#7a1d6d', '#7c1d6d', '#7d1e6d', '#7f1e6c', '#801f6c',
	'#82206c', '#84206b', '#85216b', '#87216b', '#88226a', '#8a226a', '#8c2369',
	'#8d2369', '#8f2469', '#902568', '#922568', '#932667', '#952667', '#972766',
	'#982766', '#9a2865', '#9b2964', '#9d2964', '#9f2a63', '#a02a63', '#a22b62',
	'#a32c61', '#a52c60', '#a62d60', '#a82e5f', '#a92e5e', '#ab2f5e', '#ad305d',
	'#ae305c', '#b0315b', '#b1325a', '#b3325a', '#b43359', '#b63458', '#b73557',
	'#b93556', '#ba3655', '#bc3754', '#bd3853', '#bf3952', '#c03a51', '#c13a50',
	'#c33b4f', '#c43c4e', '#c63d4d', '#c73e4c', '#c83f4b', '#ca404a', '#cb4149',
	'#cc4248', '#ce4347', '#cf4446', '#d04545', '#d24644', '#d34743', '#d44842',
	'#d54a41', '#d74b3f', '#d84c3e', '#d94d3d', '#da4e3c', '#db503b', '#dd513a',
	'#de5238', '#df5337', '#e05536', '#e15635', '#e25734', '#e35933', '#e45a31',
	'#e55c30', '#e65d2f', '#e75e2e', '#e8602d', '#e9612b', '#ea632a', '#eb6429',
	'#eb6628', '#ec6726', '#ed6925', '#ee6a24', '#ef6c23', '#ef6e21', '#f06f20',
	'#f1711f', '#f1731d', '#f2741c', '#f3761b', '#f37819', '#f47918', '#f57b17',
	'#f57d15', '#f67e14', '#f68013', '#f78212', '#f78410', '#f8850f', '#f8870e',
	'#f8890c', '#f98b0b', '#f98c0a', '#f98e09', '#fa9008', '#fa9207', '#fa9407',
	'#fb9606', '#fb9706', '#fb9906', '#fb9b06', '#fb9d07', '#fc9f07', '#fca108',
	'#fca309', '#fca50a', '#fca60c', '#fca80d', '#fcaa0f', '#fcac11', '#fcae12',
	'#fcb014', '#fcb216', '#fcb418', '#fbb61a', '#fbb81d', '#fbba1f', '#fbbc21',
	'#fbbe23', '#fac026', '#fac228', '#fac42a', '#fac62d', '#f9c72f', '#f9c932',
	'#f9cb35', '#f8cd37', '#f8cf3a', '#f7d13d', '#f7d340', '#f6d543', '#f6d746',
	'#f5d949', '#f5db4c', '#f4dd4f', '#f4df53', '#f4e156', '#f3e35a', '#f3e55d',
	'#f2e661', '#f2e865', '#f2ea69', '#f1ec6d', '#f1ed71', '#f1ef75', '#f1f179',
	'#f2f27d', '#f2f482', '#f3f586', '#f3f68a', '#f4f88e', '#f5f992', '#f6fa96',
	'#f8fb9a', '#f9fc9d', '#fafda1', '#fcffa4')
# Reversed inferno
colors_inferno_reversed = list(reversed(colors_inferno))
session.Spectrum(name="Inferno", colors=colors_inferno)
session.Spectrum(name="Reversed Inferno", colors=colors_inferno_reversed)
${0}
endsnippet

snippet abqmesh "Mesh an instance in assembly" b
${1:region} = (${2:instance}.faces, )
${3:elemType_${4:1}} = mesh.ElemType(elemCode=${5:CPS4R}, elemLibrary=STANDARD)

${6:assembly}.setElementType(regions=$1, elemTypes=($3, ))
$6.seedPartInstance(regions=($2, ), size=${7:elem size})
$6.generateMesh(regions=($2, ))
$0
endsnippet

snippet abqstep "Creation of a new step in the model" b
${1:model}.StaticStep(name='${2:name}', previous='Initial',
	nlgeom=False, timeIncrementationMethod=AUTOMATIC, initialInc=0.5, maxInc=1.0,
	maxNumInc=1000)
$0
endsnippet

snippet abqjob "Create a Job object" b
${1:job} = mdb.Job(name="${2:name}", model=${3:model}.name,
				description='${4:description}',
				numCpus=${5:cpus}, numDomains=$5)

$1.submit()
$1.waitForCompletion()
$0
endsnippet

snippet abqpath "Create path object in postprocessing" b
${1:path_1} = session.Path(name='${2:name}', type=${3:POINT_LIST},
						expression=((${4:x,y,z}), $0))
endsnippet

snippet abqpathd "Extract data from path" b
${1:data} = xyPlot.XYDataFromPath(path=${2:path}, name='${3:name}', includeIntersections=True,
			shape=UNDEFORMED, pathStyle=${4:PATH_POINTS|UNIFORM_SPACING}
			numIntervals=10, labelType=TRUE_DISTANCE,
			variable=('S', INTEGRATION_POINT, ('S11', INTEGRATION_POINT)))
endsnippet

snippet abqsweepdir "Function to set sweep direction of mesh" b
def set_sweep_direction(region, instance, model, direction="y"):
	"""Change the sweep direction of the region.

	Parameters
	----------
	region : Cell
	model : Abaqus model
	direction : str
		Direction to set for the sweep

	"""
	asmbly = model.rootAssembly
	# Get all the edges of the cell
	edges = region.getEdges()

	# Iterate over the edges until one is found in the right direction
	for ei in edges:
		# Get the edge
		edge_i = instance.edges[ei]
		# Get Vertices
		v1_i, v2_i = edge_i.getVertices()
		v1 = instance.vertices[v1_i]
		v2 = instance.vertices[v2_i]
		# Get coordinates of the vertices
		coord_1 = v1.pointOn[0]
		coord_2 = v2.pointOn[0]

		if direction == "x":
			if coord_1[1] == coord_2[1] and coord_1[2] == coord_2[2]:
				sel_edge = edge_i
				break
		elif direction == "y":
			if coord_1[0] == coord_2[0] and coord_1[2] == coord_2[2]:
				sel_edge = edge_i
				break
		elif direction == "z":
			if coord_1[0] == coord_2[0] and coord_1[1] == coord_2[1]:
				sel_edge = edge_i
				break

	# Set the sweep direction
	asmbly.setSweepPath(region=region, edge=sel_edge, sense=FORWARD)

$0
endsnippet
