# define function to ensure directory
snippet ensuredir "Creates a folder if it does not exist" b
import os
def ensure_dir(f):
	"""look up for the directory 'f' and creates it if it doesn't exist."""
	if not os.path.exists(f):
		os.makedirs(f)
${0}
endsnippet

# rc Params for De Gruyter Journals
snippet rcparams_gruyter "rcParams for De Gruyter Journals" b
# Add the following befor importing pyplot:
# import matplotlib as mpl
# mpl.use('pgf')
rc_params_gruyter = {
	"figure.figsize": (2.8, 2.0),
	"axes.spines.right": False,
	"axes.spines.top": False,
	"font.size": 8,
	"legend.fontsize": 8,
	"axes.labelsize": 8,
	"lines.linewidth": 1.0,
	"lines.markersize": 5,
	"text.usetex": True,
	"pgf.rcfonts": False,
	"pgf.texsystem": 'lualatex',
	"pgf.preamble":(r"""\usepackage{fontspec}
\PassOptionsToPackage{no-math}{fontspec}
\usepackage{amsmath}
\usepackage{siunitx}
\usepackage{unicode-math}
\setmainfont{Univers for UniS 55 Roman}
\setsansfont{Univers for UniS 55 Roman}
\setmathfont{Latin Modern Math}
\setmathfont[range=\mathup/{num,latin,Latin,greek,Greek}]{Univers for UniS 55 Roman}
\setmathfont[range=\mathbfup/{num,latin,Latin,greek,Greek}]{Univers for UniS 65 Bold}
\setmathfont[range=\mathit/{num,latin,Latin,greek,Greek}]{Univers for UniS 45 Light Oblique}
\setmathfont[range=\mathbfit/{num,greek,Greek}]{Univers for UniS 65 Bold}
\setmathfont[range={"0002B,"000B1,"000D7,"02044,"02212,"02215,"0002F,"0002E}]{Univers for UniS 55 Roman}""" ),
}
mpl.rcParams.update(rc_params_gruyter)
# Optimal figure size: (2.8, 2.0)
endsnippet

# rc Params for INTER paper
snippet rcparams_INTER "rcParams for INTER papers" b
# Add the following befor importing pyplot:
# import matplotlib as mpl
# mpl.use('pgf')
rc_params_inter = {
	"font.size": 12,
	"legend.fontsize": 10,
	"lines.markersize": 8,
	"text.usetex": True,
	"pgf.rcfonts": True,
	"pgf.texsystem": 'lualatex',
	"pgf.preamble": (r"""\usepackage{fontspec}",
\PassOptionsToPackage{no-math}{fontspec}
\usepackage{amsmath}
\usepackage{siunitx}
\usepackage{unicode-math}
\setmainfont{Calibri, Light}
\setsansfont{Calibri, Light}
\setmathfont{Latin Modern Math}
\setmathfont[range=\mathup/{num,latin,Latin,greek,Greek}]{Calibri Light}
\setmathfont[range=\mathbfup/{num,latin,Latin,greek,Greek}]{Calibri}
\setmathfont[range=\mathit/{num,latin,Latin,greek,Greek}]{Calibri Light Italic}
\setmathfont[range=\mathbfit/{num,greek,Greek}]{Calibri Italic}
\setmathfont[range={"0002B,"000B1,"000D7,"02044,"02212,"02215,"0002F,"0002E}]{Calibri Light}""" ),
}
mpl.rcParams.update(rc_params_inter)
# Optimal figure size: (3.4, 2.4)
endsnippet

# rc Params for MPA presentation
snippet rcparams_mpa_presentation "rcParams for MPA presentation" b
# Add the following befor importing pyplot:
# import matplotlib as mpl
# mpl.use('pgf')
rc_params_mpa_presentation = {
	"figure.figsize": (3.4, 2.4),
	"axes.spines.right": False,
	"axes.spines.top": False,
	"font.size": 10,
	"legend.fontsize": 8,
	"axes.labelsize": 10,
	"xtick.labelsize": 10,
	"ytick.labelsize": 10,
	"axes.formatter.use_mathtext": True,
	"lines.linewidth": 1.0,
	"lines.markersize": 5,
	"text.usetex": True,
	"pgf.rcfonts": True,
	"pgf.texsystem": 'lualatex',
	"pgf.preamble": (r"""\usepackage{fontspec}
\PassOptionsToPackage{no-math}{fontspec}
\usepackage{amsmath}
\usepackage{siunitx}
\usepackage{unicode-math}
\setmainfont{Arial}
\setsansfont{Arial}
\setmathfont{Latin Modern Math}
\setmathfont[range=\mathup/{num,latin,Latin,greek,Greek}]{Arial}
\setmathfont[range=\mathbfup/{num,latin,Latin,greek,Greek}]{Arial Bold}
\setmathfont[range=\mathit/{num,latin,Latin,greek,Greek}]{Arial Italic}
\setmathfont[range=\mathbfit/{num,greek,Greek}]{Arial Bold Italic}
\setmathfont[range={"0002B,"000B1,"000D7,"02044,"02212,"02215,"0002F,"0002E}]{Arial}""" ),
}
mpl.rcParams.update(rc_params_mpa_presentation)
# Optimal figure size: (3.4, 2.4)
endsnippet

# rc Params for my thesis
snippet rcparams_thesis "rcParams for my thesis" b
# Add the following befor importing pyplot:
# import matplotlib as mpl
# mpl.use('pgf')

rc_params_thesis = {
	"figure.figsize": (2.8, 2.0),
	"font.size": 8,
	"legend.fontsize": 8,
	"axes.spines.right": False,
	"axes.spines.top": False,
	"axes.labelsize": 8,
	"lines.linewidth": 1.0,
	"lines.markersize": 5,
	"text.usetex": True,
	"pgf.rcfonts": False,
	"pgf.texsystem": "lualatex",
	"pgf.preamble":(r"""\usepackage{fontspec}
\PassOptionsToPackage{no-math}{fontspec}
\usepackage{amsmath}
\usepackage{siunitx}
\usepackage{unicode-math}
\setmainfont{XCharter}
\setsansfont{XCharter}
\setmathfont{Latin Modern Math}""" )

}
mpl.rcParams.update(rc_params_thesis)
# Optimal figure size: (2.8, 2.0)
endsnippet

# rc Params for Elsevier Journals
snippet rcparams_elsevier "rcParams for Elsevier Journals" b
# Add the following befor importing pyplot:
# import matplotlib as mpl
# mpl.use('pgf')
rc_params_elsevier = {
	"figure.figsize": (3.5, 2.5),
	"axes.spines.right": False,
	"axes.spines.top": False,
	"font.size": 8,
	"legend.fontsize": 8,
	"axes.labelsize": 8,
	"lines.linewidth": 1.0,
	"lines.markersize": 5,
	"text.usetex": True,
	"pgf.rcfonts": False,
	"pgf.texsystem": 'lualatex',
	"pgf.preamble":(r"""\usepackage{fontspec}
\PassOptionsToPackage{no-math}{fontspec}
\usepackage{amsmath}
\usepackage{siunitx}
\usepackage{unicode-math}
\setmainfont{XCharter}
\setsansfont{XCharter}
\setmathfont{Latin Modern Math}
""" ),
}
mpl.rcParams.update(rc_params_elsevier)
# Optimal figure size one column: (3.5, 2.5)
# Optimal figure size two columns: (7.48, 5.3)
endsnippet

# Figure (Horizontal)
snippet fig "Matplotlib horizontal figure" b
${1:fig} = plt.figure(${2:figsize=(${3:2.8}, `!p
from math import sqrt
try:
	snip.rv = round(float(t[3]) / sqrt(2), 1)
except:
	snip.rv = t[3]
`)})
${4:ax} = $1.add_subplot(${5:111})
$0
endsnippet

# Figure (Horizontal)
snippet figv "Matplotlib vertical figure" b
${1:fig} = plt.figure(${2:figsize=(${3:2.8}, `!p
from math import sqrt
try:
	snip.rv = round(float(t[3]) * sqrt(2), 1)
except:
	snip.rv = t[3]
`)})
${4:ax} = $1.add_subplot(${5:111})
$0
endsnippet

# Add extra axis
snippet ax "New axis in figure" b
${1:ax} = ${2:fig}.add_subplot(${3:122}${4:, sharey=${5:ax}})
endsnippet

# Arrow properties in annotate
snippet arrowprop "Add arrow properties to annotation" i
arrowprops={"arrowstyle": "${1:->}", "connectionstyle":"${2:arc}"}
endsnippet

# Bbox properties
snippet bbox "Add bbox properties" i
bbox={"boxstyle": "${1:round,pad=0.2}", "fc":"${2:white}", "ec": "${3:k}"}
endsnippet

# Table
snippet table "Add table" b
table = plt.table(
	cellText=$1,
	rowLabels=$2,
	rowColours=$3,
	colLabels=$4,
	loc='bottom')
# Adjust layout to make room for the table:
plt.subplots_adjust(left=0.2, bottom=0.2)
endsnippet

# skip import sort
snippet skip "Skip isort"
# isort:skip
endsnippet
