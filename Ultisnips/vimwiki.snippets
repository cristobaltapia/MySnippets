# Snippets for VimWiki

global !p
import re
import ntpath
from pubs.config import load_conf
from pubs.repo import Repository

# Expand math snippets only within math environments
# (source: https://castel.dev/post/lecture-notes-1/ )
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C',
'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS',
'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']] + ["VimwikiMath", "VimwikiEqIn"]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(
			i for i in reversed(synstackids)
			if i in texIgnoreMathZoneIds or i in texMathZoneIds
		)
		return first != ignore
	except StopIteration:
		return False

# Utilities for citation management.
def get_citation(citekey, config):
	ti, au, ye = _get_bib_info(citekey, config)
	entry = f"*{au}* ({ye}), _{ti}_"
	return entry

def _get_bib_info(citekey, config):
	conf = load_conf(config)
	repo = Repository(conf)
	paper = repo.pull_paper(citekey)
	bibdata = paper.bibdata
	if "author" in bibdata:
		au = "; ".join(bibdata["author"])
	elif "editor" in bibdata:
		au = "; ".join(bibdata["editor"])
	elif "key" in bibdata:
		au = bibdata["key"]
	elif "organization" in bibdata:
		au = bibdata["organization"]
	else:
		au = "N.N."

	title = bibdata["title"]
	year = bibdata["year"]

	return title, au, year

def path_leaf(path):
    head, tail = ntpath.split(path)
    return tail or ntpath.basename(head)

def print_bib_head_info():
	bufvim = vim.current.buffer
	name = bufvim.name
	buf = snip.buffer
	cite = path_leaf(name)
	key = re.findall(r"^.*(?=\.)", cite)[0]
	conf_path = vim.vars["vimwiki_pubs_config"]
	# Get bib info
	try:
		ti, au, ye = _get_bib_info(key, conf_path)
		buf = snip.buffer
		snip.rv = f"= {ti} = \n {au}\n {ye}\n\n== Notes ==\n"
	except:
		print(f"Citekey {key} does not exist!")

def insert_bib_info_list(citekey):
	conf_path = vim.vars["vimwiki_pubs_config"]
	# Get bib info
	try:
		ti, _, _ = _get_bib_info(citekey, conf_path)
		buf = snip.buffer
		snip.expand_anon(f" : {ti}")
	except:
		print(f"Citekey {key} does not exist!")

def insert_method_call(name):
	cw = vim.current.window
	buf = snip.buffer
	pos = cw.cursor
	# Search for "References" section
	need_ref_sec = True
	for line in buf[0:-1]:
		if "== References ==" == line:
			need_ref_sec = False
	if need_ref_sec:
		buf.append(["== References ==", ""])

	try:
		conf_path = vim.vars["vimwiki_pubs_config"]
		buf.append("- " + get_citation(name, conf_path))
	except:
		buf.append("- " + name)

	cw.cursor = pos
endglobal


snippet head "Title of the file" b
= $1 =
$0
endsnippet

snippet sec "First level section" b
== ${1:section} ==
$0
endsnippet

snippet sub "Second level section" b
== ${1:subsection} ==
$0
endsnippet

snippet $$ "In-line equation" iA
\$$1\$ $0
endsnippet

snippet eq "Block equation environment"
\{\{$
	$1
}}$
$0
endsnippet

snippet al "Aligned equation environment"
\{\{%align%
	$1
}}$
$0
endsnippet

# Snippets for equations
context "math()"
snippet __ "Subscript" iA
_\{${1}}$0
endsnippet

context "math()"
snippet ^^ "Superscript" iA
^\{${1}}$0
endsnippet

snippet task "Create a task list"
* [ ] ${1:Task description}
endsnippet

# Add citation with link to respective note and an entry in the 'Reference'
# section at the end of the file
context "snip.context = {'name': None}"
post_jump "if snip.tabstop == 0: insert_method_call(snip.context['name'])"
snippet "@([A-Za-z_0-9]*)" "Link with citation style" rW
[[`!p
snip.rv = match.group(1)`|`!p
import re
try:
	name = re.findall(r'([A-Za-z]*)', match.group(1))
	year = re.findall(r'([0-9]*[abcdef]?$)', match.group(1))
	res = f'{name[0]} ({year[0]})'
	snip.rv = res
except:
	snip.rv = ''
snip.context['name'] = match.group(1)`]] $0
endsnippet

# Add citation with link to respective note, followed by the title of the reference.
# Useful to add to a list of reference as an index.
snippet "@-([A-Za-z_0-9]*)" "List citation with title" rW
`!p
import re
try:
	conf_path = vim.vars["vimwiki_pubs_config"]
	ti, _, _ = _get_bib_info(match.group(1), conf_path)
	name = re.findall(r'([A-Za-z]*)', match.group(1))
	year = re.findall(r'([0-9]*[abcdef]?$)', match.group(1))
	res = f'[[{match.group(1)}|{name[0]} ({year[0]})]] : {ti}'
except:
	res = f"{match.group(1)}"
snip.rv = res`$0
endsnippet

snippet headbib "Create the head for a note on a paper in the pubs library" b
`!p print_bib_head_info()`
$0
endsnippet
